# Karpenter Helm chart values

## Global settings
global:
  # -- Karpenter image registry
  # registry: public.ecr.aws

## Controller settings
controller:
  # -- Controller resource requests and limits
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi

## Settings for Karpenter
settings:
  # -- AWS EKS Cluster name
  # clusterName: "my-cluster"
  
  # -- AWS SQS queue name for node interruption events
  # interruptionQueue: "karpenter-interruption-queue"
  
  # -- AWS Region
  # region: "us-west-2"
  
  # -- Karpenter log level (debug, info, warn, error)
  logLevel: "info"
  
  # -- Karpenter log format (json, text)
  logFormat: "json"
  
  # -- Karpenter feature gates
  featureGates:
    # -- Enable drift detection to identify nodes that have drifted from spec
    driftEnabled: true

## Service account configuration
serviceAccount:
  # -- Service account name
  # name: "karpenter"
  
  # -- Service account annotations
  annotations: {}
    # -- IAM role ARN for Karpenter service account
    # eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/karpenter-controller"

## Node template defaults
nodeTemplate:
  # -- Default node labels
  labels: 
    node-type: "karpenter-managed"
    provisioner: "karpenter"
  
  # -- Default node taints
  taints: []
  
  # -- Default node metadata
  metadata:
    # -- Propagate labels from EC2 to Nodes
    labels:
      propagateLabels: true

## Node class defaults
nodeClassDefaults:
  # -- Default AMI family to use (AL2, Bottlerocket, Ubuntu, etc.)
  amiFamily: "Bottlerocket"

## Node pool defaults
nodePoolDefaults:
  # -- Default disruption settings
  disruption:
    # -- Whether to consolidate nodes when possible
    consolidationPolicy: WhenEmptyOrUnderutilized
    
    # -- Whether to expire nodes when possible
    expireAfter: 168h # 7 days

## Metrics configuration
metrics:
  # -- Whether to enable metrics
  enabled: true

## Webhook configuration
webhook:
  # -- Port for the webhook
  port: 8443

# Custom resources to create with the Helm chart
crds:
  # EC2NodeClass resource
  ec2NodeClass:
    create: true
    name: "bottlerocket"
    role: "karpenter-${CLUSTER_NAME}"
    amiFamily: "Bottlerocket"
    amiVersion: "v1.32.0"
    blockDeviceMappings:
      - deviceName: "/dev/xvda"
        ebs:
          volumeSize: "4Gi"
          volumeType: "gp3"
          encrypted: true
          deleteOnTermination: true
      - deviceName: "/dev/xvdb"
        ebs:
          volumeSize: "20Gi"
          volumeType: "gp3"
          encrypted: true
          deleteOnTermination: true
    subnetSelector:
      karpenter.sh/discovery: "${CLUSTER_NAME}"
    securityGroupSelector:
      karpenter.sh/discovery: "${CLUSTER_NAME}"
    tags:
      karpenter.sh/discovery: "${CLUSTER_NAME}"

  # NodePool resource
  nodePool:
    create: true
    name: "bottlerocket"
    requirements:
      - key: "kubernetes.io/arch"
        operator: "In"
        values: ["arm64", "amd64"]
      - key: "kubernetes.io/os"
        operator: "In"
        values: ["linux"]
      - key: "karpenter.sh/capacity-type"
        operator: "In"
        values: ["spot", "on-demand"]
      - key: "karpenter.k8s.aws/instance-family"
        operator: "In"
        values: ["m6g", "c6g", "c7g", "t4g", "i4g", "im4gn", "c5"]
      - key: "karpenter.k8s.aws/instance-size"
        operator: "In"
        values: ["nano", "micro", "small", "medium", "large", "xlarge", "2xlarge"]
    limits:
      cpu: 1000
    disruption:
      consolidationPolicy: "WhenEmptyOrUnderutilized"
      consolidateAfter: "30s"
      budgets:
        - nodes: "10%"
          schedule: "0 9 * * 1-5"
          duration: "12h"
        - nodes: "50%"
          schedule: "0 21 * * 1-5"
          duration: "12h"
        - nodes: "10%"
          schedule: "0 0 * * 0,6"
          duration: "24h"
    nodeClassRef:
      name: "bottlerocket"
    expireAfter: "168h"
