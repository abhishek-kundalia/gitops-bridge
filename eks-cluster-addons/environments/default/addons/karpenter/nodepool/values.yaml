globalLabels: {}

globalAnnotations: {}

nodePool:
  default:
    # Labels are arbitrary key-values that are applied to all nodes
    # Labels are arbitrary key-values that are applied to all nodes
    labels: {}
 
    # Annotations are arbitrary key-values that are applied to all nodes
    annotations: {}

    # References the Cloud Provider's NodeClass resource
    nodeClassRef:
      group: karpenter.k8s.aws
      kind: EC2NodeClass
      name: bottlerocket

    # Provisioned nodes will have these taints
    taints: []

    # Provisioned nodes will have these taints, but pods do not need to tolerate these taints
    startupTaints: []
 
    # Requirements that constrain the parameters of provisioned nodes
    requirements:
      # Support both ARM64 and AMD64 architectures
      - key: kubernetes.io/arch
        operator: In
        values: ["arm64", "amd64"]

      # Only provision Linux nodes
      - key: kubernetes.io/os
        operator: In
        values: ["linux"]

      # Allow both spot and on-demand instances
      - key: karpenter.sh/capacity-type
        operator: In
        values: ["spot", "on-demand"]

      # Specify allowed instance families
      - key: karpenter.k8s.aws/instance-family
        operator: In
        values: ["m6g", "c6g", "c7g", "t4g", "i4g", "im4gn", "c5"]

      # Allow instance sizes from nano to 2xlarge
      - key: karpenter.k8s.aws/instance-size
        operator: In
        values: ["nano", "micro", "small", "medium", "large", "xlarge", "2xlarge"]

    # Kubelet configuration for system resources and overhead
    kubelet:
      podsPerCore: 10
      maxPods: 110
      systemReserved:
        cpu: "200m"
        memory: "200Mi"
        ephemeral-storage: "1Gi"
      kubeReserved:
        cpu: "100m"
        memory: "100Mi"
        ephemeral-storage: "1Gi"
      evictionHard:
        memory.available: "5%"
        nodefs.available: "10%"
        nodefs.inodesFree: "10%"
      evictionSoft:
        memory.available: "500Mi"
        nodefs.available: "15%"
        nodefs.inodesFree: "15%"
      evictionSoftGracePeriod:
        memory.available: "1m"
        nodefs.available: "1m"
        nodefs.inodesFree: "1m"
      evictionMaxPodGracePeriod: 60
      imageGCHighThresholdPercent: 85
      imageGCLowThresholdPercent: 80
      cpuCFSQuota: true
   
    # Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes
    disruption:
      # Use WhenEmptyOrUnderutilized for production to optimize costs
      consolidationPolicy: WhenEmptyOrUnderutilized
      
      # Wait 30s before consolidating nodes
      consolidateAfter: 30s
      
      # Node expiration after 7 days (168 hours)
      expireAfter: 168h
    
    # Resource limits constrain the total size of the cluster
    limits:
      cpu: 1000
      memory: 1000Gi

ec2NodeClass:
  default:
    # Using Bottlerocket AMI
    amiFamily: Bottlerocket
    
    # Subnet selection based on cluster tags
    subnetSelectorTerms:
      - tags:
          karpenter.sh/discovery: "eks-gitops-bridge"

    # Security group selection based on cluster tags
    securityGroupSelectorTerms:
      - tags:
          karpenter.sh/discovery: "eks-gitops-bridge"
  
    # IAM role for the nodes
    role: "karpenter-eks-gitops-bridge"

    # AMI selection for Bottlerocket
    amiSelectorTerms:
      - alias: "bottlerocket@v1.32.0"

    # Block device mappings for Bottlerocket OS
    blockDeviceMappings:
      # Root device for OS
      - deviceName: /dev/xvda
        ebs:
          volumeSize: "4Gi"
          volumeType: gp3
          encrypted: true
          deleteOnTermination: true
      # Data device for container resources
      - deviceName: /dev/xvdb
        ebs:
          volumeSize: "20Gi"
          volumeType: gp3
          encrypted: true
          deleteOnTermination: true
    
    # Enable detailed monitoring for production
    detailedMonitoring: false

    # Don't associate public IP addresses for security
    associatePublicIPAddress: false
    
    # # Tags for EC2 instances
    # tags:
    #   Environment: Production
    #   IntentLabel: apps
    #   KarpenterNodePoolName: default
    #   NodeType: default
    #   intent: apps
    #   karpenter.sh/discovery: "eks-gitops-bridge"
    #   project: karpenter-blueprints
