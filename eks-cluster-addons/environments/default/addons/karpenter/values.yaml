# Karpenter Helm chart values

## Global settings
global:
  # -- Karpenter image registry
  # registry: public.ecr.aws

## Controller settings
controller:
  # -- Controller resource requests and limits
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi

## Settings for Karpenter
settings:
  # -- AWS EKS Cluster name
  # clusterName: "my-cluster"
  
  # -- AWS SQS queue name for node interruption events
  # interruptionQueue: "karpenter-interruption-queue"
  
  # -- AWS Region
  # region: "us-west-2"
  
  # -- Karpenter log level (debug, info, warn, error)
  logLevel: "info"
  
  # -- Karpenter log format (json, text)
  logFormat: "json"
  
  # -- Karpenter feature gates
  featureGates:
    # -- Enable drift detection to identify nodes that have drifted from spec
    driftEnabled: true

## Service account configuration
serviceAccount:
  # -- Service account name
  # name: "karpenter"
  
  # -- Service account annotations
  annotations: {}
    # -- IAM role ARN for Karpenter service account
    # eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/karpenter-controller"

## Node template defaults
nodeTemplate:
  # -- Default node labels
  labels: 
    node-type: "karpenter-managed"
    provisioner: "karpenter"
  
  # -- Default node taints
  taints: []
  
  # -- Default node metadata
  metadata:
    # -- Propagate labels from EC2 to Nodes
    labels:
      propagateLabels: true

## Node class defaults
nodeClassDefaults:
  # -- Default AMI family to use (AL2, Bottlerocket, Ubuntu, etc.)
  amiFamily: "Bottlerocket"

## Node pool defaults
nodePoolDefaults:
  # -- Default disruption settings
  disruption:
    # -- Whether to consolidate nodes when possible
    consolidationPolicy: WhenEmptyOrUnderutilized
    
    # -- Whether to expire nodes when possible
    expireAfter: 168h # 7 days

## Metrics configuration
metrics:
  # -- Whether to enable metrics
  enabled: true

## Webhook configuration
webhook:
  # -- Port for the webhook
  port: 8443

# Cluster name for resource discovery
clusterName: "${CLUSTER_NAME}"

# NodeClass configuration
nodeClass:
  enabled: true
  name: "bottlerocket"
  role: "karpenter-${CLUSTER_NAME}"
  kubelet:
    podsPerCore: 10
    maxPods: 110
    systemReserved:
      cpu: "200m"
      memory: "200Mi"
      ephemeralStorage: "1Gi"
    kubeReserved:
      cpu: "100m"
      memory: "100Mi"
      ephemeralStorage: "1Gi"
    evictionHard:
      memoryAvailable: "5%"
      nodefsAvailable: "10%"
      nodefsInodesFree: "10%"
    evictionSoft:
      memoryAvailable: "500Mi"
      nodefsAvailable: "15%"
      nodefsInodesFree: "15%"
    evictionSoftGracePeriod:
      memoryAvailable: "1m"
      nodefsAvailable: "1m"
      nodefsInodesFree: "1m"
    evictionMaxPodGracePeriod: 60
    imageGCHighThresholdPercent: 85
    imageGCLowThresholdPercent: 80
    cpuCFSQuota: true
  amiSelectorTerms:
    alias: "bottlerocket@v1.32.0"
  blockDeviceMappings:
    root:
      deviceName: "/dev/xvda"
      volumeSize: "4Gi"
      volumeType: "gp3"
      encrypted: true
      deleteOnTermination: true
    data:
      deviceName: "/dev/xvdb"
      volumeSize: "20Gi"
      volumeType: "gp3"
      encrypted: true
      deleteOnTermination: true

# NodePool configuration
nodePool:
  enabled: true
  name: "bottlerocket"
  requirements:
    arch: ["arm64", "amd64"]
    os: ["linux"]
    capacityType: ["spot", "on-demand"]
    instanceFamily: ["m6g", "c6g", "c7g", "t4g", "i4g", "im4gn", "c5"]
    instanceSize: ["nano", "micro", "small", "medium", "large", "xlarge", "2xlarge"]
  expireAfter: "168h"
  limits:
    cpu: 1000
  disruption:
    consolidationPolicy: "WhenEmptyOrUnderutilized"
    consolidateAfter: "30s"
    budgets:
      - nodes: "10%"
        schedule: "0 9 * * 1-5"
        duration: "12h"
      - nodes: "50%"
        schedule: "0 21 * * 1-5"
        duration: "12h"
      - nodes: "10%"
        schedule: "0 0 * * 0,6"
        duration: "24h"
